import { Signer } from "@ethersproject/abstract-signer";
import { IContractOrder, IFillDetails } from "../types/internal";
import { IRelayerMakerOrder } from "../types/relayer";
export declare function getOrderSignature(order: IRelayerMakerOrder, wallet: Signer): Promise<string>;
export declare function getOrderHash(order: IContractOrder): string;
export declare function getFillOrderEIP712Payload(fillDetails: IFillDetails, chainId: number, version: string, verifyingContract: string): {
    types: {
        EIP712Domain: {
            name: string;
            type: string;
        }[];
        Details: {
            name: string;
            type: string;
        }[];
        FillObject: {
            name: string;
            type: string;
        }[];
        Order: {
            name: string;
            type: string;
        }[];
    };
    primaryType: string;
    domain: {
        name: string;
        version: string;
        chainId: number;
        verifyingContract: string;
    };
    message: {
        action: string;
        market: string;
        betting: string;
        stake: string;
        odds: string;
        returning: string;
        fills: {
            makerSigs: string[];
            orders: {
                marketHash: string;
                baseToken: string;
                totalBetSize: string;
                percentageOdds: string;
                expiry: string;
                salt: string;
                maker: string;
                executor: string;
                isMakerBettingOutcomeOne: boolean;
            }[];
            takerAmounts: string[];
            fillSalt: string;
            beneficiary: string;
        };
    };
};
export declare function getMaticEip712Payload(abiEncodedFunctionSig: string, nonce: number, from: string, chainId: number, verifyingContract: string, domainName: string): {
    types: {
        EIP712Domain: {
            name: string;
            type: string;
        }[];
        MetaTransaction: {
            name: string;
            type: string;
        }[];
    };
    domain: {
        name: string;
        version: string;
        salt: string;
        verifyingContract: string;
    };
    message: {
        nonce: number;
        from: string;
        functionSignature: string;
    };
    primaryType: string;
};
export declare function getCancelOrderEventsEIP712Payload(sportXeventId: string, salt: string, timestamp: number, chainId: number): {
    types: {
        EIP712Domain: {
            name: string;
            type: string;
        }[];
        Details: {
            name: string;
            type: string;
        }[];
    };
    primaryType: string;
    domain: {
        name: string;
        version: string;
        chainId: number;
        salt: string;
    };
    message: {
        sportXeventId: string;
        timestamp: number;
    };
};
export declare function getCancelAllOrdersEIP712Payload(salt: string, timestamp: number, chainId: number): {
    types: {
        EIP712Domain: {
            name: string;
            type: string;
        }[];
        Details: {
            name: string;
            type: string;
        }[];
    };
    primaryType: string;
    domain: {
        name: string;
        version: string;
        chainId: number;
        salt: string;
    };
    message: {
        timestamp: number;
    };
};
export declare function getCancelOrderEIP712Payload(orderHashes: string[], salt: string, timestamp: number, chainId: number): {
    types: {
        EIP712Domain: {
            name: string;
            type: string;
        }[];
        Details: {
            name: string;
            type: string;
        }[];
    };
    primaryType: string;
    domain: {
        name: string;
        version: string;
        chainId: number;
        salt: string;
    };
    message: {
        orderHashes: string[];
        timestamp: number;
    };
};
