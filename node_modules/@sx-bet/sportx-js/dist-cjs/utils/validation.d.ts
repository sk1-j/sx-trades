import { isAddress } from "@ethersproject/address";
import { IFillDetailsMetadata } from "../types/internal";
import { IGetTradesRequest, INewOrder, IPendingBetsRequest, IRelayerMakerOrder, ISignedRelayerMakerOrder } from "../types/relayer";
export declare function validateIGetPendingBetsRequest(payload: IPendingBetsRequest): "invalid startDate" | "invalid endDate" | "invalid bettor" | "invalid fillHash" | "invalid baseToken" | "OK";
export declare function validateIGetTradesRequest(payload: IGetTradesRequest): "invalid startDate" | "invalid endDate" | "invalid bettor" | "invalid baseToken" | "OK" | "startDate not before endDate" | "invalid settled" | "invalid maker" | "invalid marketHashes" | "invalid affiliate" | "invalid pageSize" | "invalid paginationKey";
export declare function validateIFillDetailsMetadata(metadata: IFillDetailsMetadata): "OK" | "action is not a string" | "market is not a string" | "betting is not a string" | "stake is not a string" | "odds is not a string" | "returning is not a string";
export declare function validateIRelayerMakerOrder(order: IRelayerMakerOrder): string;
export declare function validateISignedRelayerMakerOrder(order: ISignedRelayerMakerOrder): string;
export declare function validateINewOrderSchema(order: INewOrder): "OK" | "Expiry undefined or malformed." | "Expiry before current time." | "totalBetSize undefined or malformed." | "impliedOdds must be between 0 and 1 exclusive." | "marketHash undefined or malformed." | "isMakerBettingOutcomeOne undefined or malformed." | "baseToken undefined or malformed.";
/**
 * Checks if an object is a ethers.BigNumber and greater than zero
 * Implicitly checks if the object is undefined.
 * @param object Any object
 */
export declare function isPositiveBigNumber(object: any): boolean;
export { isAddress };
